<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="main.css" />
    <style>
      * {
        font-family: "Roboto";
      }

      body {
        background-color: rgb(170, 187, 204);
      }

      .tables {
        width: 100%;
        max-width: 45rem;
        padding: 1em;
        margin: 1em auto;
        overflow: auto;
        color: rgb(102, 79, 145);
        background-color: rgb(255, 255, 255);
        box-shadow: 0px 0.25rem 1rem rgba(0, 0, 0, 0.25);
        border: 4px solid rgb(238, 68, 101);
      }

      .cards__list {
        clear: both;
        display: flex;
        flex-wrap: wrap;
      }

      .cards__item {
        margin-bottom: 20px;
        border: 3px solid rgb(216, 191, 216);
        width: 136px;
        height: 130px;
        margin-right: 20px;
        vertical-align: middle;
        text-align: center;
        color: rgb(102, 79, 145);
      }

      .occupied {
        background-color: rgba(0, 0, 0, 0.05);
      }

      button {
        background-color: rgb(221, 160, 221);
        border: 0;
        width: 80px;
        padding: 5px;
        color: rgb(102, 79, 145);
        cursor: pointer;
        font-size: 1em;
        outline: none;
      }

      .party {
        width: 100%;
        max-width: 45rem;
        padding: 1em;
        margin: 1em auto;
        background-color: rgb(255, 255, 255);
        box-shadow: 0px 0.25rem 1rem rgba(0, 0, 0, 0.25);
        display: flex;
        flex-direction: column;
        /* border: 4px solid rgba(10, 10, 101, 0.2); */
      }

      .party .title {
        color: rgb(102, 79, 145);
      }

      .party .line {
        color: rgb(102, 79, 145);
        font-size: 16px;
      }

      .party input {
        width: 95%;
        margin: 1em auto;
        padding: 10px 15px;
        border: 4px solid rgba(10, 10, 101, 0.2);
        color: rgba(10, 10, 101, 0.4);
        font-weight: 700;
        outline: none;
      }

      .party input::placeholder {
        color: rgba(10, 10, 101, 0.4);
        font-weight: 700;
      }

      .party input:hover,
      .party input:focus {
        border: 4px solid rgba(10, 10, 101, 0.8);
        outline: none;
      }

      .party button {
        background-color: rgba(10, 10, 101, 0.2);
        border: 0;
        width: auto;
        padding: 10px 50px;
        color: rgb(102, 79, 145);
        cursor: pointer;
        font-size: 1em;
        margin: 0 0 1em auto;
        font-weight: 700;
        outline: none;
      }
    </style>
    <title>
      Restaurant Manager
    </title>
  </head>

  <body>
    <!-- main app  -->
    <div id="app">
      <x-restaurant
        :tables="tables"
        @available-occupied-table="availableOccupiedTable"
      ></x-restaurant>

      <!-- new party form -->
      <div class="party">
        <h2 class="title">New Party</h2>
        <p class="line">
          Fill the following form to allocate a table to a party that is waiting
          to be seated.
        </p>
        <input
          v-model="numOfPeople"
          placeholder="Number of people (non-zero positive integer)"
        />
        <input
          v-model="duration"
          placeholder="Duration of stay in seconds (positive number)"
        />
        <input
          v-model="fussMessage"
          placeholder="Fuss message if evicted (text)"
        />
        <button type="button" @click="addNewParty">
          Add
        </button>
      </div>
    </div>

    <!-- x-restaurant component -->
    <template id="x-restaurant">
      <section class="tables">
        <h1>
          Tables Overview
        </h1>

        <transition-group name="fade" tag="ul" class="cards__list">
          <x-table
            v-for="(element, index) in tables"
            @complete="$emit('available-occupied-table',element.id)"
            :element="element"
            :key="element.id"
          ></x-table>
        </transition-group>
      </section>
    </template>

    <!-- x-table component -->
    <template id="x-table">
      <div class="cards__item" v-bind:class="{occupied:!element.status}">
        <div :status="element.status" v-if="element.status">
          <p>Table Available</p>
          <p>(capacity= {{element.capacity}})</p>
        </div>
        <div v-else>
          <p>Occupied by {{element.occupied}}</p>
          <p :duration="start">(free in {{timeLeft}})</p>
          <button @click="reAvailableTable">
            Evict
          </button>
        </div>
      </div>
    </template>
  </body>
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script>
    /** x-restaurant component */
    Vue.component("x-restaurant", {
      template: "#x-restaurant",
      props: {
        tables: { default: [] }
      },
      data() {
        return {
          numOfPeople: "",
          duration: "",
          fussMessage: ""
        };
      },
      // TODO:
      // mounted() {
      //   if (localStorage.getItem("tables"))
      //     this.tables = JSON.parse(localStorage.getItem("tables"));
      // },
      // watch: {
      //   tables: {
      //     handler() {
      //       localStorage.setItem("tables", JSON.stringify(this.tables));
      //     },
      //     deep: true
      //   }
      // },
      methods: {}
    });

    /** x-table component  */
    Vue.component("x-table", {
      template: "#x-table",
      props: ["element"],
      data() {
        return {
          timeLeft: "00:00",
          endTime: "0"
        };
      },
      computed: {
        start() {
          this.setTime();
        }
      },
      methods: {
        setTime() {
          this.timer(this.element.duration);
        },
        timer(seconds) {
          const now = Date.now();
          const end = now + seconds * 1000;
          this.displayTimeLeft(seconds);
          this.displayEndTime(end);
          this.countdown(end);
        },
        countdown(end) {
          intervalTimer = setInterval(() => {
            const secondsLeft = Math.round((end - Date.now()) / 1000);

            if (secondsLeft === 0) {
              this.endTime = 0;
            }

            if (secondsLeft < 0) {
              clearInterval(intervalTimer);
              if (this.timeLeft === `00:00`) this.reAvailableTable();
              return;
            }
            this.displayTimeLeft(secondsLeft);
          }, 1000);
        },
        displayTimeLeft(secondsLeft) {
          const minutes = Math.floor((secondsLeft % 3600) / 60);
          const seconds = secondsLeft % 60;

          this.timeLeft = `${zeroPadded(minutes)}:${zeroPadded(seconds)}`;
        },
        displayEndTime(timestamp) {
          const end = new Date(timestamp);
          const hour = end.getHours();
          const minutes = end.getMinutes();

          this.endTime = `${hourConvert(hour)}:${zeroPadded(minutes)}`;
        },
        reAvailableTable() {
          this.element.status = 1;
          this.$emit("complete", this.element.id);
        }
      }
    });

    Vue.component("alert", {
      props: ["message", "show"],
      template: "#alert"
    });

    function zeroPadded(num) {
      // 4 --> 04
      return num < 10 ? `0${num}` : num;
    }

    function hourConvert(hour) {
      // 15 --> 3
      return hour % 12 || 12;
    }

    /** app component  */
    new Vue({
      el: "#app",
      data: {
        tables: [
          {
            id: 1,
            capacity: 10,
            occupied: 0,
            status: 1,
            duration: "00:00",
            fussMessage: ""
          },
          {
            id: 2,
            capacity: 8,
            occupied: 0,
            status: 1,
            duration: "00:00",
            fussMessage: ""
          },
          {
            id: 3,
            capacity: 10,
            occupied: 0,
            status: 1,
            duration: "00:00",
            fussMessage: ""
          },
          {
            id: 4,
            capacity: 6,
            occupied: 0,
            status: 1,
            duration: "00:00",
            fussMessage: ""
          },
          {
            id: 5,
            capacity: 2,
            occupied: 0,
            status: 1,
            duration: "00:00",
            fussMessage: ""
          },
          {
            id: 6,
            capacity: 6,
            occupied: 0,
            status: 1,
            duration: "00:00",
            fussMessage: ""
          },
          {
            id: 7,
            capacity: 4,
            occupied: 0,
            status: 1,
            duration: "00:00",
            fussMessage: ""
          },
          {
            id: 8,
            capacity: 12,
            occupied: 0,
            status: 1,
            duration: "00:00",
            fussMessage: ""
          }
        ],
        availableTables: [10, 8, 10, 6, 2, 6, 4, 12],
        numOfPeople: "",
        duration: "",
        fussMessage: ""
      },
      methods: {
        addNewParty() {
          const tempAvailable = this.handleAvailableTables(this.numOfPeople);
          const targetIndex = this.min(tempAvailable, this.numOfPeople);

          if (targetIndex !== -1) {
            this.tables[targetIndex].status = 0;
            this.tables[targetIndex].duration = this.duration;
            this.tables[targetIndex].occupied = this.numOfPeople;
            this.tables[targetIndex].fussMessage = this.fussMessage;
            this.availableTables[targetIndex] = 0;
          }
          /** TODO: else if not found any target (targetIndex=-1) should be await until found target */

          this.resetForm();
        },
        handleAvailableTables(size) {
          let temp = [];
          for (let i = 0; i < this.availableTables.length; i++) {
            if (size <= this.availableTables[i])
              temp.push(this.availableTables[i]);
            else temp.push(0);
          }
          return temp;
        },
        min(list, num) {
          let minVal = 12;

          list.map(val => {
            if (val <= minVal && val >= num) {
              minVal = val;
            }
          });

          return list.indexOf(minVal);
        },
        resetForm() {
          this.numOfPeople = "";
          this.duration = "";
          this.fussMessage = "";
        },
        availableOccupiedTable(id) {
          const targetIndex = id - 1;

          this.tables[targetIndex].status = 1;
          this.tables[targetIndex].occupied = 0;
          this.tables[targetIndex].fussMessage = "";
          this.tables[targetIndex].duration = "00:00";
          this.availableTables[targetIndex] = this.tables[targetIndex].capacity;
        }
      }
    });
  </script>
</html>
